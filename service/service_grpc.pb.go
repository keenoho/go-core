// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceHandlerClient is the client API for ServiceHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceHandlerClient interface {
	Send(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	StreamSend(ctx context.Context, opts ...grpc.CallOption) (ServiceHandler_StreamSendClient, error)
}

type serviceHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceHandlerClient(cc grpc.ClientConnInterface) ServiceHandlerClient {
	return &serviceHandlerClient{cc}
}

func (c *serviceHandlerClient) Send(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/ServiceHandler/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHandlerClient) StreamSend(ctx context.Context, opts ...grpc.CallOption) (ServiceHandler_StreamSendClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceHandler_ServiceDesc.Streams[0], "/ServiceHandler/StreamSend", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHandlerStreamSendClient{stream}
	return x, nil
}

type ServiceHandler_StreamSendClient interface {
	Send(*ServiceRequest) error
	CloseAndRecv() (*ServiceResponse, error)
	grpc.ClientStream
}

type serviceHandlerStreamSendClient struct {
	grpc.ClientStream
}

func (x *serviceHandlerStreamSendClient) Send(m *ServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceHandlerStreamSendClient) CloseAndRecv() (*ServiceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceHandlerServer is the server API for ServiceHandler service.
// All implementations must embed UnimplementedServiceHandlerServer
// for forward compatibility
type ServiceHandlerServer interface {
	Send(context.Context, *ServiceRequest) (*ServiceResponse, error)
	StreamSend(ServiceHandler_StreamSendServer) error
	mustEmbedUnimplementedServiceHandlerServer()
}

// UnimplementedServiceHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceHandlerServer struct {
}

func (UnimplementedServiceHandlerServer) Send(context.Context, *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedServiceHandlerServer) StreamSend(ServiceHandler_StreamSendServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSend not implemented")
}
func (UnimplementedServiceHandlerServer) mustEmbedUnimplementedServiceHandlerServer() {}

// UnsafeServiceHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceHandlerServer will
// result in compilation errors.
type UnsafeServiceHandlerServer interface {
	mustEmbedUnimplementedServiceHandlerServer()
}

func RegisterServiceHandlerServer(s grpc.ServiceRegistrar, srv ServiceHandlerServer) {
	s.RegisterService(&ServiceHandler_ServiceDesc, srv)
}

func _ServiceHandler_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHandlerServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceHandler/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHandlerServer).Send(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHandler_StreamSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceHandlerServer).StreamSend(&serviceHandlerStreamSendServer{stream})
}

type ServiceHandler_StreamSendServer interface {
	SendAndClose(*ServiceResponse) error
	Recv() (*ServiceRequest, error)
	grpc.ServerStream
}

type serviceHandlerStreamSendServer struct {
	grpc.ServerStream
}

func (x *serviceHandlerStreamSendServer) SendAndClose(m *ServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceHandlerStreamSendServer) Recv() (*ServiceRequest, error) {
	m := new(ServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceHandler_ServiceDesc is the grpc.ServiceDesc for ServiceHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceHandler",
	HandlerType: (*ServiceHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ServiceHandler_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSend",
			Handler:       _ServiceHandler_StreamSend_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
