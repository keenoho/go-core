// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: base.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Base_BaseRequest_FullMethodName       = "/Base/BaseRequest"
	Base_BaseStreamRequest_FullMethodName = "/Base/BaseStreamRequest"
)

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseClient interface {
	BaseRequest(ctx context.Context, in *BaseRequestBody, opts ...grpc.CallOption) (*BaseResponseBody, error)
	BaseStreamRequest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BaseRequestBody, BaseResponseBody], error)
}

type baseClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseClient(cc grpc.ClientConnInterface) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) BaseRequest(ctx context.Context, in *BaseRequestBody, opts ...grpc.CallOption) (*BaseResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponseBody)
	err := c.cc.Invoke(ctx, Base_BaseRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) BaseStreamRequest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BaseRequestBody, BaseResponseBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Base_ServiceDesc.Streams[0], Base_BaseStreamRequest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BaseRequestBody, BaseResponseBody]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Base_BaseStreamRequestClient = grpc.ClientStreamingClient[BaseRequestBody, BaseResponseBody]

// BaseServer is the server API for Base service.
// All implementations must embed UnimplementedBaseServer
// for forward compatibility.
type BaseServer interface {
	BaseRequest(context.Context, *BaseRequestBody) (*BaseResponseBody, error)
	BaseStreamRequest(grpc.ClientStreamingServer[BaseRequestBody, BaseResponseBody]) error
	mustEmbedUnimplementedBaseServer()
}

// UnimplementedBaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseServer struct{}

func (UnimplementedBaseServer) BaseRequest(context.Context, *BaseRequestBody) (*BaseResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseRequest not implemented")
}
func (UnimplementedBaseServer) BaseStreamRequest(grpc.ClientStreamingServer[BaseRequestBody, BaseResponseBody]) error {
	return status.Errorf(codes.Unimplemented, "method BaseStreamRequest not implemented")
}
func (UnimplementedBaseServer) mustEmbedUnimplementedBaseServer() {}
func (UnimplementedBaseServer) testEmbeddedByValue()              {}

// UnsafeBaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServer will
// result in compilation errors.
type UnsafeBaseServer interface {
	mustEmbedUnimplementedBaseServer()
}

func RegisterBaseServer(s grpc.ServiceRegistrar, srv BaseServer) {
	// If the following call pancis, it indicates UnimplementedBaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Base_ServiceDesc, srv)
}

func _Base_BaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).BaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_BaseRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).BaseRequest(ctx, req.(*BaseRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_BaseStreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BaseServer).BaseStreamRequest(&grpc.GenericServerStream[BaseRequestBody, BaseResponseBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Base_BaseStreamRequestServer = grpc.ClientStreamingServer[BaseRequestBody, BaseResponseBody]

// Base_ServiceDesc is the grpc.ServiceDesc for Base service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Base_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BaseRequest",
			Handler:    _Base_BaseRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BaseStreamRequest",
			Handler:       _Base_BaseStreamRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "base.proto",
}
