// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: base.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BaseService_Request_FullMethodName       = "/BaseService/Request"
	BaseService_StreamRequest_FullMethodName = "/BaseService/StreamRequest"
)

// BaseServiceClient is the client API for BaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseServiceClient interface {
	Request(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error)
	StreamRequest(ctx context.Context, opts ...grpc.CallOption) (BaseService_StreamRequestClient, error)
}

type baseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseServiceClient(cc grpc.ClientConnInterface) BaseServiceClient {
	return &baseServiceClient{cc}
}

func (c *baseServiceClient) Request(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error) {
	out := new(ResponseBody)
	err := c.cc.Invoke(ctx, BaseService_Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) StreamRequest(ctx context.Context, opts ...grpc.CallOption) (BaseService_StreamRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &BaseService_ServiceDesc.Streams[0], BaseService_StreamRequest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &baseServiceStreamRequestClient{stream}
	return x, nil
}

type BaseService_StreamRequestClient interface {
	Send(*RequestBody) error
	CloseAndRecv() (*ResponseBody, error)
	grpc.ClientStream
}

type baseServiceStreamRequestClient struct {
	grpc.ClientStream
}

func (x *baseServiceStreamRequestClient) Send(m *RequestBody) error {
	return x.ClientStream.SendMsg(m)
}

func (x *baseServiceStreamRequestClient) CloseAndRecv() (*ResponseBody, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BaseServiceServer is the server API for BaseService service.
// All implementations must embed UnimplementedBaseServiceServer
// for forward compatibility
type BaseServiceServer interface {
	Request(context.Context, *RequestBody) (*ResponseBody, error)
	StreamRequest(BaseService_StreamRequestServer) error
	mustEmbedUnimplementedBaseServiceServer()
}

// UnimplementedBaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBaseServiceServer struct {
}

func (UnimplementedBaseServiceServer) Request(context.Context, *RequestBody) (*ResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedBaseServiceServer) StreamRequest(BaseService_StreamRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequest not implemented")
}
func (UnimplementedBaseServiceServer) mustEmbedUnimplementedBaseServiceServer() {}

// UnsafeBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServiceServer will
// result in compilation errors.
type UnsafeBaseServiceServer interface {
	mustEmbedUnimplementedBaseServiceServer()
}

func RegisterBaseServiceServer(s grpc.ServiceRegistrar, srv BaseServiceServer) {
	s.RegisterService(&BaseService_ServiceDesc, srv)
}

func _BaseService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).Request(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_StreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BaseServiceServer).StreamRequest(&baseServiceStreamRequestServer{stream})
}

type BaseService_StreamRequestServer interface {
	SendAndClose(*ResponseBody) error
	Recv() (*RequestBody, error)
	grpc.ServerStream
}

type baseServiceStreamRequestServer struct {
	grpc.ServerStream
}

func (x *baseServiceStreamRequestServer) SendAndClose(m *ResponseBody) error {
	return x.ServerStream.SendMsg(m)
}

func (x *baseServiceStreamRequestServer) Recv() (*RequestBody, error) {
	m := new(RequestBody)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BaseService_ServiceDesc is the grpc.ServiceDesc for BaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BaseService",
	HandlerType: (*BaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _BaseService_Request_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRequest",
			Handler:       _BaseService_StreamRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "base.proto",
}
