// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: router.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Router_RouterRequest_FullMethodName       = "/Router/RouterRequest"
	Router_RouterStreamRequest_FullMethodName = "/Router/RouterStreamRequest"
)

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	RouterRequest(ctx context.Context, in *RouterRequestBody, opts ...grpc.CallOption) (*RouterResponseBody, error)
	RouterStreamRequest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RouterRequestBody, RouterResponseBody], error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) RouterRequest(ctx context.Context, in *RouterRequestBody, opts ...grpc.CallOption) (*RouterResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouterResponseBody)
	err := c.cc.Invoke(ctx, Router_RouterRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) RouterStreamRequest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[RouterRequestBody, RouterResponseBody], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Router_ServiceDesc.Streams[0], Router_RouterStreamRequest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RouterRequestBody, RouterResponseBody]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Router_RouterStreamRequestClient = grpc.ClientStreamingClient[RouterRequestBody, RouterResponseBody]

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility.
type RouterServer interface {
	RouterRequest(context.Context, *RouterRequestBody) (*RouterResponseBody, error)
	RouterStreamRequest(grpc.ClientStreamingServer[RouterRequestBody, RouterResponseBody]) error
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouterServer struct{}

func (UnimplementedRouterServer) RouterRequest(context.Context, *RouterRequestBody) (*RouterResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouterRequest not implemented")
}
func (UnimplementedRouterServer) RouterStreamRequest(grpc.ClientStreamingServer[RouterRequestBody, RouterResponseBody]) error {
	return status.Errorf(codes.Unimplemented, "method RouterStreamRequest not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}
func (UnimplementedRouterServer) testEmbeddedByValue()                {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	// If the following call pancis, it indicates UnimplementedRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_RouterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).RouterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_RouterRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).RouterRequest(ctx, req.(*RouterRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_RouterStreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).RouterStreamRequest(&grpc.GenericServerStream[RouterRequestBody, RouterResponseBody]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Router_RouterStreamRequestServer = grpc.ClientStreamingServer[RouterRequestBody, RouterResponseBody]

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouterRequest",
			Handler:    _Router_RouterRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouterStreamRequest",
			Handler:       _Router_RouterStreamRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "router.proto",
}
